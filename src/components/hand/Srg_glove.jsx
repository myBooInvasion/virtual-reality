/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.2 srg_glove.glb --shadows --transform
Author: SrGeneroso (https://sketchfab.com/srgeneroso)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/srg-glove-79a3902f37f2482c97520f3f19e419ab
Title: SRG Glove
*/

import React, { useRef } from 'react';
import { useGLTF } from '@react-three/drei';
import { RigidBody, vec3, quat } from '@react-three/rapier';
import { useController } from '@react-three/xr';
import { useFrame } from '@react-three/fiber';
import { Quaternion, Vector3 } from 'three';

const positionHand = new Vector3();
const rotateHand = new Quaternion();

export function Hands(props) {
  const { nodes, materials } = useGLTF('/model/srg_glove-transformed.glb');

  const handRef = useRef();

  // Controller
  const handControl = useController(props.grip);

  // Frame
  useFrame((state, delta) => {
    const handGrip = handControl?.grip.matrixWorld;

    if (handControl) {
      positionHand.setFromMatrixPosition(handGrip);
      rotateHand.setFromRotationMatrix(handGrip);
      handRef.current.setTranslation(vec3({ x: positionHand.x, y: positionHand.y, z: positionHand.z }));
      handRef.current.setRotation(quat({x: rotateHand.x, y: rotateHand.y, z: rotateHand.z, w: rotateHand.w}));
    }
  });

  return (
    <group {...props} dispose={null}>
      <RigidBody ref={handRef} colliders='hull' type='kinematicPosition' position={[props.posX, 1, 0]} name={props.name}>
        <group rotation={[Math.PI/1.2, 0, props.rotate]} scale={props.scaling}>
          <mesh castShadow receiveShadow geometry={nodes.Object_2.geometry} material={materials.defaultMat} />
          <mesh castShadow receiveShadow geometry={nodes.Object_3.geometry} material={materials.defaultMat} />
          <mesh castShadow receiveShadow geometry={nodes.Object_4.geometry} material={materials.defaultMat} />
        </group>
      </RigidBody>
    </group>
  );
}

useGLTF.preload('/model/srg_glove-transformed.glb');
